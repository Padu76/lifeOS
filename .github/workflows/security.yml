name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      continue-on-error: true
        
    - name: Validate environment variables
      run: |
        echo "Checking for required environment variables..."
        
        # Check that sensitive vars are not in code
        if grep -r "SUPABASE_ANON_KEY.*=" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ùå Found hardcoded Supabase keys in source code"
          exit 1
        fi
        
        if grep -r "SUPABASE_URL.*=" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ùå Found hardcoded Supabase URL in source code"
          exit 1
        fi
        
        if grep -r "OPENAI_API_KEY.*=" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ùå Found hardcoded OpenAI API key in source code"
          exit 1
        fi
        
        echo "‚úÖ No hardcoded secrets found"
        
    - name: Check for common security issues
      run: |
        echo "Checking for common security patterns..."
        
        # Check for eval usage
        if grep -r "eval(" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Found eval() usage - potential security risk"
          exit 1
        fi
        
        # Check for innerHTML usage
        if grep -r "innerHTML.*=" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Found innerHTML usage - potential XSS risk"
          exit 1
        fi
        
        # Check for document.write usage
        if grep -r "document\.write" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Found document.write usage - potential security risk"
          exit 1
        fi
        
        echo "‚úÖ No common security issues found"
        
    - name: Check for TODO security items
      run: |
        if grep -r "TODO.*security\|FIXME.*security\|XXX.*security" --include="*.ts" --include="*.tsx" --include="*.js" --exclude-dir=node_modules .; then
          echo "‚ö†Ô∏è Found security-related TODOs that need attention"
          # Don't exit here, just warn
        fi
        
    - name: Validate file permissions
      run: |
        echo "Checking file permissions..."
        
        # Check for world-writable files
        if find . -type f -perm -o+w -not -path "./node_modules/*" -not -path "./.git/*"; then
          echo "‚ö†Ô∏è Found world-writable files"
        fi
        
        echo "‚úÖ File permissions check completed"
        
    - name: Check package.json security
      run: |
        echo "Checking package.json security..."
        
        # Check for scripts that might be dangerous
        if grep -E "rm -rf|sudo|su |chmod 777" package.json; then
          echo "‚ö†Ô∏è Found potentially dangerous scripts in package.json"
          exit 1
        fi
        
        echo "‚úÖ Package.json security check passed"
        
    - name: Environment check summary
      run: |
        echo "üìä Security Scan Summary:"
        echo "‚úÖ Dependency audit completed"
        echo "‚úÖ Hardcoded secrets check passed"
        echo "‚úÖ Common security patterns check passed"
        echo "‚úÖ Package.json security check passed"
        echo ""
        echo "üîí Security scan completed successfully!"
