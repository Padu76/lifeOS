name: LifeOS CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # ==================================================
  # Code Quality & Linting
  # ==================================================
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Run Prettier check
        run: npm run format:check
      
      - name: TypeScript type checking
        run: npm run type-check

  # ==================================================
  # Testing
  # ==================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests
        run: npm run test:unit
      
      - name: Run integration tests
        run: npm run test:integration
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_TEST }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_TEST }}
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # ==================================================
  # Build Verification
  # ==================================================
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        app: [web, mobile]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build web app
        if: matrix.app == 'web'
        run: |
          cd apps/web
          npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      
      - name: Build mobile app
        if: matrix.app == 'mobile'
        run: |
          cd apps/mobile
          npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.app }}
          path: apps/${{ matrix.app }}/dist/

  # ==================================================
  # Security Scanning
  # ==================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level=high
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ==================================================
  # Package Validation
  # ==================================================
  package-validation:
    name: Package Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Validate package.json files
        run: |
          for package in packages/*/package.json; do
            echo "Validating $package"
            node -e "JSON.parse(require('fs').readFileSync('$package', 'utf8'))"
          done
      
      - name: Check package dependencies
        run: npm run check-deps
      
      - name: Verify exports
        run: npm run verify-exports

  # ==================================================
  # Edge Functions Testing
  # ==================================================
  edge-functions:
    name: Edge Functions Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      
      - name: Test Edge Functions
        run: |
          cd supabase/functions
          for func in */index.ts; do
            echo "Testing $func"
            deno check "$func"
          done
      
      - name: Lint Edge Functions
        run: |
          cd supabase/functions
          deno lint --rules-include=recommended

  # ==================================================
  # Documentation Check
  # ==================================================
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check API docs exist
        run: |
          echo "Checking Edge Functions documentation..."
          test -f docs/api-edge-functions.md
          test -f docs/api-hooks.md
          test -f docs/api-components.md
          test -f docs/api-types.md
      
      - name: Validate markdown
        uses: DavidAnson/markdownlint-action@v1
        with:
          files: 'docs/**/*.md'
          config: '.markdownlint.json'
      
      - name: Check broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          folder-path: 'docs/'

  # ==================================================
  # Performance Testing
  # ==================================================
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build for performance testing
        run: |
          cd apps/web
          npm run build
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

# ==================================================
# Success Notification
# ==================================================
  notify-success:
    name: Success Notification
    runs-on: ubuntu-latest
    needs: [lint, test, build, security, package-validation, edge-functions, docs]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "âœ… LifeOS CI Pipeline completed successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
